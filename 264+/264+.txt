


【注意】
a. 改变 Gop 后需要重新进行设置。
b. 设置高级跳帧参考后需要重新进行设置，不支持高级跳帧参考 bEnablePred=0。
c. 保证设置的行数可以在一个 Gop 内完成 I 宏块刷新，注意高级跳帧参考时只会在
base 层中 BASE_PSLICE_REFBYBASE 帧进行刷新。
d. 需要等到下一个 I 帧时生效的接口在进行参数设置后会生成一个 I 帧，保证参数设
置生效。
e. 本接口只支持 H264 协议。


每次 I 宏块刷新行数，可以通过这个变量控制刷新的速
度及码流的平稳程度。刷新的宏块行数越多，刷新的速
度越快，但是码流平稳度越差；刷新的宏块行数越少，
刷新的速度越慢，但是码流平稳度越好


u32RefreshLineNum 以宏块行数为单位




――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――分割线――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

代码实际改哪几处
1、mw_enc_api.c中修改全局变量值minqp_array[5] = 			{32, 28, 32, 20, 16 }//wigewige modify to reduce bitrate at motionle
2、sample_comm_venc.c中增加调用HI_MPI_VENC_SetIntraRefresh接口
3、为适配3518ev200 8MB flash，hank_sys.h中关掉ULU等一些宏




――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――分割线――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――


u32MinQp、u32MinIQp：对最小 QP 进行限制。希望在图像静止或小运动的时候节省码率，CBR 建议设置为[10,20]；VBR 建议设置为[24,32]

增大最小QP来降低码率




【之前】u32MinQp=24、u32MinIQp=24
小范围运动：  平均2909～3046  当前2591～3286    主startqp 37~39,偶尔31，次startqp 37~40,偶尔41，32
手晃动：      平均2943～3097  当前2292～3495    主startqp 33~,偶尔31，次startqp 37~40,偶尔41，32
用手遮：      平均2872～3136  当前2579～3310    主startqp 33~40,次startqp 31~40，遮住时qp变大，发生变化时qp变大，码率冲高一下，引起qp变大，保持不变时qp变下，用手遮着，码率只有1.4Mb/s左右，qp此时已是最小24，场景简单，
                                                一放开手，马上又回到3Mb/S多，主qp拉升到34左右，次qp在24～30间跳


主码流3072
次码流512
点播主码流
【调整后】u32MinQp=32、u32MinIQp=32
小范围运动：  平均965～1113  当前730～1423    主startqp 一直32，次startqp 一直32
手晃动：      平均2871～3064  当前2607～3167    主startqp 32~37，次startqp 32
用手遮：      平均2597～3032  当前2354～4067    主startqp 40,次startqp 41，遮住时qp变大，发生变化时qp变大，码率冲高一下，引起qp变大，保持不变时qp变下，用手遮着，平均码率只有366Kb/s左右， 当前码率326～404，qp此时已是最小32，场景简单，



主码流3000BPS 264 1080p VBR 16FPS GOP32
次码流500BPS 264 640X360 VBR 16FPS GOP32
点播主码流
【天视通】
完全静止场景：平均602～722  当前385～952
小范围运动：  平均1069～1356 2354～3086  当前 907～3847
手晃动：      平均3039～3218  当前2853～3457
用手遮：      平均2992～3289  当前2645～4239    用手遮着，平均码率只有585~703Kb/s左右， 当前码率419～812，但一点点运动都可以让当前码率立马上升到1600，3400，3800

码率稳定下去的快3000下一刻到297k，一不动就码率下去，上升也快，从600k下一刻就到3300多k，4104k，一微小运动顺时码率上来。当前码率波动剧烈，从200k到4300k，瞬间跳跃。有运动，码率马上跟上。换句话说关注运动，抛弃静止。





――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――分割线――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――


背景帧倒像是I帧。原来的I帧通过参考背景帧来编码、继而传出去，采用了帧间预测，原来的I帧倒像是P帧了，


对于运动少或偶尔一定时间内出现运动物体，264+可以节省50%以上的存储和带宽，代价是更多用于智能算法的CPU计算和控制内存消耗，但是划的来的，图像质量也与264相当。
但当监控场景中一直有运动的物体时，使用264+，即背景法，则节省不了存储和带宽，这就得不偿失了，算法做了，CPU也消耗了，但没带来存储和带宽的节省。但监控场景下24小时一直有运动物体，实际中这是很少见的。




分出图像中的背景部分（大楼马路）和运动部分（车辆行人）后，可以采用分别对待的策略。对背景可以压缩高一些，降低码流码率，还可以抑制噪声


264+省出来的就是背景部分，背景部分的编码压缩和还原解压
运动部分其实省不下来，还是靠264
有了背景帧做参考，编码时就不需要传整块背景区域的宏块，只需直接指定用那个区域的背景宏块，或指定用那个区块的背景宏块以及对比后的一点差异difference即可，传，即可完整表达当前这帧图像。
解压时，有了背景帧做参考帧，也可以很容易的从当前背景宏块和一点差异残差中复原出整幅图像。

监控因为其背景不变的特点，所以引入了背景帧的提法，而且确实实用有效
因为图像中有更多的地方可以从更多的参考帧宏块中相似的地方获取，所以可以传更小数据量的差异部分，视频可以压缩的更小
所谓背景法，就是发明出增加一帧背景图像作为参考帧，作为在做时域预测时，结合前一或参考帧和背景帧这两部分，一起来编出当前帧。当前帧很多需要的块都可以从参考帧中获取，或者只需要增加很少的差异部分
当前帧中属于背景部分的很多需要的块都可以从背景帧中获取，或者只需要增加很少的差异部分

264+的核心就是监控视频的背景部分可以省出码率，保证移动部分即可。
把背景部分再想方设法在264压缩基础上再压缩一下。





――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――分割线――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

调用HI_MPI_VENC_SetIntraRefresh，码率平滑接口
HI_MPI_VENC_SetIntraRefresh
mw_enc_api.c


跳帧参考
HI_MPI_VENC_SetRefParam


【之前】
晃动镜头，波动不大，范围  平均2900～3155  当前2300～3500
用手遮，波动大，范围  平均2400～3100  当前1400～3500



【增加平滑接口HI_MPI_VENC_SetIntraRefresh后】
IQP=24,LINE=3
几乎静止                  平均3008～3100  当前2904～3207
晃动镜头，波动不大，范围  平均2973～3136  当前2742～3192
用手遮，波动大，范围      平均2677～3047  当前1517～3311


IQP=24,LINE=18
几乎静止 3000～3100
晃动镜头，波动不大，范围  平均2920～3145  当前2761～3220
用手遮，波动大，范围  平均2604～3251  当前1966～4293




3072    1920x1080
512     640x480



――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――分割线――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

码流平滑
P 帧帧内刷新
P 帧刷新 ISlice/Intra 宏块行，可以为客户提供码流非常平滑的编码方式，每个 I 帧和 P
帧的大小可以非常接近。在网络带宽有限（如无线网络）的情况下，降低 I 帧过大带
来的网络冲击，降低网传延时，降低网络传输出错的概率。

HI_MPI_VENC_SetIntraRefresh





――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――分割线――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

确认为什么VBR静止时码率还降不下








――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――分割线――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――


我们跟天视通的对比
相同：运动时，码率波动差不多
不同，静止时，我们仍维持在3M左右码率，天视通则降到600k左右。打打降低了存储消耗和带宽占用。


把参考帧中的不动部分和运动部分分离出来、提取出来，这是核心思想
把当前图像帧中的不动部分与背景图像帧中的不动部分比，运动部分与运动部分比差，传递这两部分差异即可。
而且背景帧中这两部分可以长期使用，尤其背景帧中的不动部分。
同时，背景帧也跟着被更新。
由于监控背景经常不动，那不动部分可以长期不需要每次分配大批bit，降低了数据产生。

智能分析算法可以提取背景图像和运动对象



当前图像帧中谁是运动部分，谁是静止部分，依靠智能分析，就像人分析一样，通过人分析那是运动，那时静止，学习，深度学习，自我学习。

智能，即学习，一段时间学习。

不动部分作为长期使用和更新


运动部分多分配码率
静止部分少分配bit

基于、依靠智能分析，谁是运动部分、谁是静止部分


